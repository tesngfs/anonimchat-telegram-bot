import logging
import json
import os
import time
import random
import asyncio
import requests
from database import ensure_connection
from datetime import datetime
from aiogram import Dispatcher, html
from aiogram.filters import CommandStart, CommandObject
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.markdown import hlink
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramForbiddenError
from aiogram.types import FSInputFile
from ping3 import ping
from states import OrderFood

boter = 'anonimemessages_bot' # your bot


logging.basicConfig(level=logging.INFO)
def log_to_json(question_sender_id, question_receiver_id, question_text, answer_text):
    log_entry = {
        "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "question_sender_id": question_sender_id,
        "question_receiver_id": question_receiver_id,
        "question_text": question_text,
        "answer_text": answer_text
    }

    today_date = datetime.now().strftime("%Y-%m-%d")
    log_file_path = f"{today_date}_logs.json"

    if not os.path.exists(log_file_path):
        with open(log_file_path, 'w', encoding='utf-8') as log_file:
            json.dump([], log_file, ensure_ascii=False)

    try:
        with open(log_file_path, 'r', encoding='utf-8') as log_file:
            logs = json.load(log_file)
    except (json.JSONDecodeError, UnicodeDecodeError):
        logs = []
        with open(log_file_path, 'w', encoding='utf-8') as log_file:
            json.dump(logs, log_file, ensure_ascii=False)


    logs.append(log_entry)

    with open(log_file_path, 'w', encoding='utf-8') as log_file:
        json.dump(logs, log_file, ensure_ascii=False, indent=4)
        
def register_handlers(dp: Dispatcher, conn, bot):
    @dp.message(CommandStart(deep_link=True))
    async def start(message: Message, command: CommandObject, state: FSMContext):
        args = command.args
        await message.reply(f'–£—Ö-—Ç—ã, –∫–∞–∫–æ–π(-–∞—è) —Ç—ã. –î–∞–≤–∞–π –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å –±—ã—Å—Ç—Ä–µ–µ!')
        await state.update_data(chat_id=args)
        await state.set_state(OrderFood.choosing_food_name)

    @dp.message(OrderFood.choosing_food_name)
    async def handle_question(message: Message, state: FSMContext) -> None:
        data = await state.get_data()
        username = message.from_user.username
        user_id = message.from_user.id
        chat_id = data.get('chat_id')
        question = message.text
        
        if question.startswith('/'):
            await message.reply(f"‚ö†Ô∏è <b>–ù–µ–ª—å–∑—è –≤–≤–æ–¥–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤.\n–ü–µ—Ä–µ–∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ —Å—Å—ã–ª–∫–µ: t.me/{boter}?start={message.chat.id}</b>", parse_mode='HTML')
            await state.clear()
        else:
            async with conn.cursor() as cursor:
                await cursor.execute("SELECT user_id FROM users WHERE user_id = %s", (user_id,))
                result = await cursor.fetchone()

                if username is None:
                        username = 'Unknown' 

                if result is None:
                    await cursor.execute("INSERT INTO users (user_id, username) VALUES (%s, %s)", (user_id, username))
                await conn.commit()
                
            inline_kb_full = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üëâ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=f"t.me/share/url?url=t.me/{boter}?start={user_id}"),
                    InlineKeyboardButton(text="üëâ –°–ø—Ä–æ—Å–∏—Ç—å –µ—â–µ —Ä–∞–∑", url=f"t.me/{boter}?start={chat_id}")
                ]
            ])
            await message.answer(f"–í—ã –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", reply_markup=inline_kb_full)

            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_{user_id}")],
                [InlineKeyboardButton(text="ü´Ä –£–∑–Ω–∞–π –∫—Ç–æ –ø–∏—à–µ—Ç", url=f"https://teletype.in/@naumov_glav/IJC3_mb6lnH")]
            ])


            async with conn.cursor() as cursor:
                await cursor.execute("SELECT vip FROM users WHERE user_id = %s", (chat_id,))
                vip_result = await cursor.fetchone()
                

            logging.info(f'Debug: Fetched VIP status = {vip_result}')

            vip = vip_result[0] if vip_result is not None else 0

            cat2 = FSInputFile("new.jpg")

            if vip == 1:
                cat = FSInputFile("new.jpg")
                await bot.send_message(chat_id=chat_id, text=f"<b>–í–æ–ø—Ä–æ—Å: {question}\n–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username} |  {message.from_user.full_name}\n\n\n </b>", reply_markup=keyboard, parse_mode = 'HTML')
                await bot.send_message(chat_id=chat_id, text=f"<b>–í–∞—Å —Å–ø—Ä–æ—Å–∏–ª–∏: {question} </b>", reply_markup=keyboard, parse_mode = 'HTML')
            else:
                await bot.send_message(chat_id=chat_id, text =f"<b>–í–∞—Å —Å–ø—Ä–æ—Å–∏–ª–∏: {question} </b>", reply_markup=keyboard, parse_mode = 'HTML')
                
            log_to_json(user_id, chat_id, question, "Not answered yet") 

            await state.clear()



    @dp.callback_query(lambda call: call.data.startswith("answer_"))
    async def process_callback_answer(callback_query: CallbackQuery, state: FSMContext):
        user_id = callback_query.data.split("_")[1]
        user_by_id = callback_query.from_user.id
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        await callback_query.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å?")
        await state.update_data(user_id=user_id, user_answer = user_by_id, full_name=callback_query.from_user.full_name)
        await state.set_state(OrderFood.answering_user)

    @dp.message(OrderFood.answering_user)
    async def answer_user(message: Message, state: FSMContext) -> None:
        data = await state.get_data()
        user_id = data.get('user_id')
        user_by = data.get('user_answer')
        full_name = data.get('full_name')
        answer = message.text
        await message.reply(f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏!")
        
        cat = FSInputFile("ask.jpeg")
        await bot.send_message(chat_id=user_id, text=f'–í–∞–º –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name} | <b>–æ—Ç–≤–µ—Ç: {answer}</b>\nüëâ –ó–∞–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —ç—Ç–æ–º—É –∂–µ —á–µ–ª–æ–≤–µ–∫—É: t.me/{boter}?start={user_by}')
                
        log_to_json(user_id, user_id, "Not logged", answer)  

        await state.clear()

    @dp.callback_query(lambda call: call.data.startswith("answers"))
    async def process_callback_answers(callback_query: CallbackQuery, state: FSMContext):
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        await callback_query.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å?")
        await state.set_state(OrderFood.answering_usere)

    @dp.message(OrderFood.answering_usere)
    async def answers_user(message: Message, state: FSMContext) -> None:
        data = await state.get_data()
        answer = message.text
        await message.reply(f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç–≤–µ—Ç {answer}")

        await state.clear()

    @dp.message(CommandStart())
    async def command_start_handler(message: Message) -> None:
        user_id = message.from_user.id
        username = message.from_user.username
        async with conn.cursor() as cursor:
            
            start = await ensure_connection(conn)
            print("Good command")
            await cursor.execute("SELECT user_id FROM users WHERE user_id = %s", (user_id,))
            result = await cursor.fetchone()

            if result is None:
                await cursor.execute("INSERT INTO users (user_id, username) VALUES (%s, %s)", (user_id, username))
            await conn.commit()
            

        cat = FSInputFile("faq.png")
        inline_kb_full = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üëâ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=f"t.me/share/url?url=t.me/{boter}?start={user_id}")
            ],
            [
                InlineKeyboardButton(text="‚ÑπÔ∏è –ì–∞–π–¥", url=f"https://teletype.in/@naumov_glav/N5QjJHV0iRO")
            ],
            [
                InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"t.me/naumov_glav")
            ]
        ])

        await bot.send_message(
            user_id,
            text=(
                f"<b>–¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ - <code> t.me/{boter}?start={user_id} </code> </b>\n\n"
                "<b>–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è Telegram, TikTok, Instagram (stories), —á—Ç–æ–±—ã –≤–∞–º –º–æ–≥–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å </b>\n\n"
            ),
            reply_markup=inline_kb_full, parse_mode='HTML'
        )

    @dp.message(Command("admin"))
    async def admin_handler(message: Message) -> None:
        async with conn.cursor() as cursor:
            start = await ensure_connection(conn)
            await cursor.execute("SELECT admin FROM users WHERE user_id = %s", (message.from_user.id,))
            result = await cursor.fetchone()
            

            key = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ | –†–∞—Å—Å—ã–ª–∫–∞", callback_data="rass"),
                        InlineKeyboardButton(text="üíã | –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='users'),
                    ],
                    [
                        InlineKeyboardButton(text="üò§ | –†–∞—Å—Å—ã–ª–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–º", callback_data='rass_vop'),
                        InlineKeyboardButton(text="üòÄ | –õ–æ–≥ –æ–±—â–µ–Ω–∏–π ", callback_data='logs'),
                    ],
                    [
                        InlineKeyboardButton(text="ü§ü | VIP ", callback_data='vip'),
                        InlineKeyboardButton(text="üòç | UN-VIP ", callback_data='unvip'),
                    ],
                ]

            )
            if result and result[0] == 1:
                await bot.send_message(message.from_user.id, text="MENU-ADMIN. –í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ", reply_markup=key)
            else:
                await bot.send_message(message.from_user.id, text="–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")

    @dp.callback_query(lambda call: call.data.startswith("logs"))
    async def rass_callback(callback_query: CallbackQuery, state: FSMContext):
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        async with conn.cursor() as cursor:
            start = await ensure_connection(conn)
            await cursor.execute("SELECT admin FROM users WHERE user_id = %s", (callback_query.from_user.id,))
            result = await cursor.fetchone()
            

            if result and result[0] == 1:
                today_date = datetime.now().strftime("%Y-%m-%d")
                log_file_path = FSInputFile(f"{today_date}_logs.json")
                await bot.send_document(chat_id=callback_query.from_user.id, document=log_file_path, caption="–õ–æ–≥–∏ –¥–Ω—è")
            else:
                await bot.send_message(callback_query.from_user.id, text="–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
                await state.clear()


    @dp.callback_query(lambda call: call.data.startswith("unvip"))
    async def rass_callback(callback_query: CallbackQuery, state: FSMContext):
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        async with conn.cursor() as cursor:
            start = await ensure_connection(conn)
            await cursor.execute("SELECT admin FROM users WHERE user_id = %s", (callback_query.from_user.id,))
            result = await cursor.fetchone()
            

            if result and result[0] == 1:
                await bot.send_message(callback_query.from_user.id, text="–≤–≤–µ–¥–∏—Ç–µ ID —á–µ–ª–æ–≤–µ–∫–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–±—Ä–∞–ª–∏ VIP")
                await state.update_data(admin = callback_query.from_user.id)
                await state.set_state(OrderFood.admin_unvip)
            else:
                await bot.send_message(callback_query.from_user.id, text="–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
                await state.clear()

    @dp.message(OrderFood.admin_unvip)
    async def admin_text(message: Message, state: FSMContext) -> None:
        text = message.text
        data =  await state.get_data()
        admin = data.get("admin")
        async with conn.cursor() as cursor:
            start = await ensure_connection(conn)
            await cursor.execute("SELECT vip FROM users WHERE user_id = %s", (text,))
            user_data = await cursor.fetchone()

        if user_data:
            user_vip_status = user_data[0] 
            if user_vip_status == 1:
                try:
                    await bot.send_message(chat_id=text, text=f"–£ –≤–∞—Å –∑–∞–±—Ä–∞–ª–∏ VIP –≤–∏–ø —Å—Ç–∞—Ç—É—Å")
                    async with conn.cursor() as cursor2:
                        start = await ensure_connection(conn)
                        await cursor2.execute("UPDATE users SET vip = 0 WHERE user_id = %s", (text,))
                        await conn.commit()
                except TelegramForbiddenError:
                    print(f"User {text} has blocked the bot.")
            else: 
                await bot.send_message(admin, text="–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –Ω–µ—Ç VIP —Å—Ç–∞—Ç—É—Å–∞!")
        else:
            await bot.send_message(admin, text="–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ!")
        await state.clear()


    @dp.callback_query(lambda call: call.data.startswith("vip"))
    async def rass_callback(callback_query: CallbackQuery, state: FSMContext):
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        async with conn.cursor() as cursor:
            start = await ensure_connection(conn)
            await cursor.execute("SELECT admin FROM users WHERE user_id = %s", (callback_query.from_user.id,))
            result = await cursor.fetchone()
            

            if result and result[0] == 1:
                await bot.send_message(callback_query.from_user.id, text="–≤–≤–µ–¥–∏—Ç–µ ID —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å VIP")
                await state.update_data(admin = callback_query.from_user.id)
                await state.set_state(OrderFood.admin_vip)
            else:
                await bot.send_message(callback_query.from_user.id, text="–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
                await state.clear()

    @dp.message(OrderFood.admin_vip)
    async def admin_text(message: Message, state: FSMContext) -> None:
        text = message.text
        data =  await state.get_data()
        admin = data.get("admin")
        async with conn.cursor() as cursor:
            start = await ensure_connection(conn)
            await cursor.execute("SELECT vip FROM users WHERE user_id = %s", (text,))
            user_data = await cursor.fetchone()

        if user_data:
            user_vip_status = user_data[0] 
            if user_vip_status == 0:
                try:
                    await bot.send_message(chat_id=text, text=f"–í–∞–º –≤—ã–¥–∞–ª–∏ VIP-—Å—Ç–∞—Ç—É—Å. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å - https://teletype.in/@naumov_glav/IJC3_mb6lnH")
                    async with conn.cursor() as cursor2:
                        start = await ensure_connection(conn)
                        await cursor2.execute("UPDATE users SET vip = 1 WHERE user_id = %s", (text,))
                        await conn.commit()
                except TelegramForbiddenError:
                    print(f"User {text} has blocked the bot.")
            else: 
                await bot.send_message(admin, text="–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å VIP —Å—Ç–∞—Ç—É—Å–∞!")
        else:
            await bot.send_message(admin, text="–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ!")
        await state.clear()


    @dp.callback_query(lambda call: call.data.startswith("rass_vop"))
    async def rass_callback(callback_query: CallbackQuery, state: FSMContext):
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        async with conn.cursor() as cursor:
            start = await ensure_connection(conn)
            await cursor.execute("SELECT admin FROM users WHERE user_id = %s", (callback_query.from_user.id,))
            result = await cursor.fetchone()
            

            if result and result[0] == 1:
                await bot.send_message(callback_query.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
                await state.set_state(OrderFood.admin_text_vop)
            else:
                await bot.send_message(callback_query.from_user.id, text="–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
                await state.clear()



    @dp.message(OrderFood.admin_text_vop)
    async def admin_text(message: Message, state: FSMContext) -> None:
        text = message.text
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data="answers")]
        ])

        async with conn.cursor() as cursor:
            start = await ensure_connection(conn)
            await cursor.execute("SELECT user_id FROM users")
            users = await cursor.fetchall()

        for user in users:
            user_id = user[0]
            try:
                cat2 = FSInputFile('new.jpg')
                await bot.send_message(chat_id=user_id, text=f"–í–æ–ø—Ä–æ—Å: {text}", reply_markup=keyboard)
            except Exception as e:
                if "chat not found" in str(e):
                    print(f"Chat not found for user ID: {user_id}. Skipping this user.")
                else:
                    print(f"An error occurred while sending message to user ID: {user_id}. Error: {e}")
            except TelegramForbiddenError:
                print(f"User {user_id} has blocked the bot.")

        await state.clear()

    @dp.callback_query(lambda call: call.data.startswith("users"))
    async def rass_callback(callback_query: CallbackQuery, state: FSMContext):
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        async with conn.cursor() as cursor:
            start = await ensure_connection(conn)
            await cursor.execute("SELECT admin FROM users WHERE user_id = %s", (callback_query.from_user.id,))
            result = await cursor.fetchone()

            if result and result[0] == 1:
                await cursor.execute("SELECT COUNT(*) FROM users")
                count = await cursor.fetchone()
                

                ip_address = 'www.google.com'
                response = ping(ip_address)
                print(response)
                if response is not None:
                    delay = int(response * 1000)
                    print(delay, " Delay ")
                await bot.send_message(callback_query.from_user.id, text=f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count[0]}\nPing: {delay}")
            else:
                await bot.send_message(callback_query.from_user.id, text="–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
                await state.clear()

    @dp.callback_query(lambda call: call.data.startswith("rass"))
    async def rass_callback(callback_query: CallbackQuery, state: FSMContext):
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        async with conn.cursor() as cursor:
            start = await ensure_connection(conn)
            await cursor.execute("SELECT admin FROM users WHERE user_id = %s", (callback_query.from_user.id,))
            result = await cursor.fetchone()
            

            if result and result[0] == 1:
                await bot.send_message(callback_query.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
                await state.set_state(OrderFood.admin_text)
            else:
                await bot.send_message(callback_query.from_user.id, text="–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
                await state.clear()

    @dp.message(OrderFood.admin_text)
    async def admin_text(message: Message, state: FSMContext) -> None:
        text = message.text

        async with conn.cursor() as cursor:
            start = await ensure_connection(conn)
            await cursor.execute("SELECT user_id FROM users")
            users = await cursor.fetchall()
            

        for user in users:
            user_id = user[0]
            try:
                await bot.send_message(chat_id=user_id, text=f"‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: \n\n{text}")
            except Exception as e:
                if "chat not found" in str(e):
                    print(f"Chat not found for user ID: {user_id}. Skipping this user.")
                else:
                    print(f"An error occurred while sending message to user ID: {user_id}. Error: {e}")
            except TelegramForbiddenError:
                print(f"User {user_id} has blocked the bot.")

        await state.clear()

    @dp.message(lambda message: not message.text.startswith("/"))
    async def handle_unknown_command(message: Message):
        await message.reply("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /start")


